?solve
makeCacheMatrix <- function(x=matrix()){
inversex<- solve(x)%*%x
inversex
}
c=rbind(c(1,-1/4)),c(-1/4,1))
c=rbind(c(1,-1/4),c(-1/4,1))
c
makeCacheMatrix(c)
c
solve(c)
solve(c)%*%c
cacheSolve(c)
cacheSolve <- function(x, ...){
inv <- x$inversex()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
inv <- solve(x)%*%x
inv
}
cacheSolve(c)
source('~/.active-rstudio-document')
makeCacheMatrix(c)
c
source('~/.active-rstudio-document')
cacheSolve(c)
cacheSolve <- function(x, ...){
inv <- inversex
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
inv <- solve(x)%*%x
inv
}
cacheSolve(c)
makeVector <- function(x=numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- numeric(1:6)
## create a special object that stores a numeric vector
makeVector <- function(x=numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- numeric()
x <- 1:6
x
makeVector(x)
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
makeVector <- function(x=numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## calculates the mean of the special vector created with the above function
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x
cachemean(x)
is.recursive(x)
?function
str(function)
str(function)
str(mean)
cachemean((makeVector(x))
x
x
makeVector(x)
y <- x
y
y <- makeVector(x)
y
cachemean(y)
cachemean <- function(x){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(y)
## create a special object that stores a numeric vector
makeVector <- function(x=numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## calculates the mean of the special vector created with the above function
cachemean <- function(x){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(y)
?...
c
d <- makeCacheMatrix(c)
d
cacheSolve(d)
makeCacheMatrix <- function(x=matrix()){
inversex<- solve(x)
inversex
}
x
makeCacheMatrix(x)
x <- matrix(1:6, 2, 3)
x
makeCacheMatrix(x)
x <- matrix(1:4, 2, 2)
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
y
cacheSolve(y)
x
x <- 1:4
y <- 1:4
x == y
x .= y
x = 1:4
y = 1:4
x
x
x <- matrix(1:4, 2, 2)
x
?list
makeCacheMatrix <- function(x=matrix()){      ##contains 4 functions: set, get, setinverse, getinverse
m <- NULL
set <- function(y){       ## set is a function that changes the vector stored in the main function
x <<- y
m <<- NULL
}
get <- function() x       ## get is a function that retruns the vector x stored in the main function
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse) ## don't calculate the inverset, just store the value of the input in a varaible m
}
x
makeCacheMatrix(x)
cacheSolve(makeCacheMatrix(x))
cacheSolve(x)
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")  ## if the inverse has already been calculated, data gets the matrix stored with makeCacheMatrix
return(m)  ## m calculates the inverse
}
data <- x$get()
m <- solve(data, ...)
m
}
cacheSolve(x)
cacheSolve(makeCacheMatrix(x))
makeCacheMatrix <- function(x=matrix()){      ##contains 4 functions: set, get, setinverse, getinverse
m <- NULL
set <- function(y){       ## set is a function that changes the vector stored in the main function
x <<- y
m <<- NULL
}
get <- function() x       ## get is a function that retruns the vector x stored in the main function
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
list ## don't calculate the inverset, just store the value of the input in a varaible m
}
x
solve(x)
x
